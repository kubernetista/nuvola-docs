{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u2601\ufe0f Nuvola Documentation Home","text":""},{"location":"#nuvola-a-local-developer-factory","title":"\u2601\ufe0f Nuvola: a Local Developer Factory \ud83c\udfed","text":"<p>Start with the \ud83d\udc49\ud83c\udffb Quick Start \ud83d\udc48\ud83c\udffb</p> <p>Docs</p> <ul> <li>Docs<code>https://docs.localtest.me</code> (this site)</li> </ul> <p>Applications</p> <ul> <li>Gitea<code>https://git.localtest.me</code></li> <li>ArgoCD<code>https://argocd.localtest.me</code></li> <li>Vault<code>https://vault.localtest.me</code></li> <li>Logs (Kubetail)<code>https://logs.localtest.me</code></li> <li>Argo Workflows<code>https://argoworkflows.localtest.me</code></li> </ul> <p>Test / debug apps</p> <ul> <li>Vault + ESO test app<code>https://vault-eso-test.localtest.me</code></li> <li>Traefik Whoami test app<code>https://whoami.localtest.me</code></li> <li>Nginx / Debug shell<code>https://debug.localtest.me</code></li> </ul>"},{"location":"ArgoCD%20generate%20admin%20password/","title":"ArgoCD generate admin password","text":"<p>It can be set before deployment in the Helm values at: <code>config.secret.argocdServerAdminPassword</code></p> <p>Reference:</p> <ul> <li>https://github.com/argoproj/argo-cd/issues/829</li> <li>https://unix.stackexchange.com/questions/307994/compute-bcrypt-hash-from-command-line</li> <li>https://stackoverflow.com/questions/15733196/where-2x-prefix-are-used-in-bcrypt/36225192#36225192</li> </ul> <pre><code># Generate a new password\nARGOCD_ADMIN_PASS=$(pwgen -s1 20 -n 1)\necho \"ArgoCD new admin password: ${ARGOCD_ADMIN_PASS}\"\nARGOCD_ADMIN_PASS_MTIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ' | tr -d '\\n')\nARGOCD_ADMIN_PASS=$(htpasswd -nbBC 10 \"\" \"${ARGOCD_ADMIN_PASS}\" | tr -d ':\\n' | sed 's/$2y/$2a/'\n\n# Update the secret (the values will be base64-encoded on the fly)\nkubectl patch secret -n argocd argocd-secret \\\n  -p '{\"stringData\": { \"admin.password\": \"'${ARGOCD_ADMIN_PASS}'\" , \"admin.passwordMtime\": \"'${ARGOCD_ADMIN_PASS_MTIME}'\" }}'\n\necho \"ArgoCD admin password updated.\"\n</code></pre>"},{"location":"Changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"Changelog/#unreleased","title":"[Unreleased]","text":"<p>-</p>"},{"location":"Changelog/#040-2024-11-23","title":"[0.4.0] - 2024-11-23","text":""},{"location":"Changelog/#status-headline","title":"Status / Headline","text":"<ul> <li>Full automation of setup with justfile, 5 minutes to get everything ready</li> </ul>"},{"location":"Changelog/#033-2024-11-19","title":"[0.3.3] - 2024-11-19","text":""},{"location":"Changelog/#status-headline_1","title":"Status / Headline","text":"<ul> <li>Setup is now almost automatic, completes in about 5 minutes</li> <li>works with:</li> <li>fastapi-uv <code>v0.3.8</code></li> <li>nuvola-docs <code>v0.2.1-11-g53b7</code></li> </ul>"},{"location":"Changelog/#added","title":"Added","text":"<p>-</p>"},{"location":"Changelog/#changed","title":"Changed","text":"<ul> <li>Completed migration to external-secrets</li> </ul>"},{"location":"Changelog/#regressions","title":"Regressions","text":"<ul> <li>Gitea Actions are disabled / not configurable</li> </ul>"},{"location":"Changelog/#deprecated","title":"Deprecated","text":"<p>-</p>"},{"location":"Changelog/#removed","title":"Removed","text":"<p>-</p>"},{"location":"Changelog/#fixed","title":"Fixed","text":"<p>-</p>"},{"location":"Changelog/#security","title":"Security","text":"<p>-</p>"},{"location":"Changelog/#032-2024-11-17","title":"[0.3.2] - 2024-11-17","text":""},{"location":"Changelog/#status","title":"Status","text":"<ul> <li>making progress, everything ok so far</li> </ul>"},{"location":"CoreDNS%20config/","title":"CoreDNS config for internal DNS resolution in Kubernetes of localtest.me domain","text":"<pre><code>    template IN A {\n        match ^(.*)\\.localtest\\.me\\.$\n        answer \"{{.Name}} 60 IN A 10.43.246.177\"\n    }\n\n    template IN CNAME {\n        match ^(.*)\\.localtest\\.me\\.$\n        answer \"{{.Name}} 60 IN CNAME traefik.traefik.svc.cluster.local.\"\n    }\n</code></pre>"},{"location":"Custom-CAs-Self-Signed-Certs/","title":"Use self-signed Certs or custom CA","text":"<p>For git, docker, etc.</p> <p>Reference:</p> <ul> <li>https://stackoverflow.com/questions/9072376/configure-git-to-accept-a-particular-self-signed-server-certificate-for-a-partic</li> <li>Gitlab: Self-signed certificates or custom Certification Authorities</li> <li>https://docs.gitlab.com/runner/configuration/tls-self-signed.html</li> </ul> <p>In case the certificate is not known upfront it is possible to get it at run time:</p> <pre><code>GIT_HOST=\"git.localtest.me\"\n\n# Show the custom cert\nopenssl s_client -showcerts -connect ${GIT_HOST}:443 -servername ${GIT_HOST} &lt; /dev/null 2&gt;/dev/null | \\\n    openssl x509 -outform PEM\n\n# Save it (i.e. for a gitlab-runnner in this case)\nopenssl s_client -showcerts -connect ${GIT_HOST}:443 -servername ${GIT_HOST} &lt; /dev/null 2&gt;/dev/null | \\\n    openssl x509 -outform PEM &gt; &gt; /etc/gitlab-runner/certs/${GIT_HOST}.crt\n</code></pre> <p>Configure git to use the custom CA</p> <pre><code>\n</code></pre> <p>Configure Docker to use the custom CA</p> <pre><code>      # as part of a GitHub/Gitea pipeline\n      - name: Create Docker certs directory and add custom CA certificate\n        run: |\n          mkdir -p /etc/docker/certs.d/git.localtest.me\n          echo \"${{ secrets.CUSTOM_CA_CERT }}\" &gt; /etc/docker/certs.d/git.localtest.me/ca.crt\n          echo \"Added /etc/docker/certs.d/git.localtest.me/ca.crt\"\n</code></pre>"},{"location":"Demo/","title":"Demo","text":""},{"location":"Demo/#create-nuvola","title":"Create nuvola","text":"<pre><code># delete current cluster\nk3d cluster delete nuvola-5\n\n# \ud83d\udc49\ud83c\udffb Quick Start \ud83d\udc48\ud83c\udffb\n\n# Watch pod creation, until ArgoCD is deployed\nkubectl get pod -A -w\n\n# Get the ArgoCD initial password\nargocd admin initial-password -n argocd | head -n 1\n\n# Login to ArgoCD\nargocd login --insecure --grpc-web --username admin argocd.localtest.me\n\n# Refresh the app-of-apps (to speed up the process)\nargocd app get &lt;appName&gt; --hard-refresh\n\n# Check progress\nargocd app wait apps --health --sync\n</code></pre>"},{"location":"Demo/#fastapi-uv","title":"fastapi-uv","text":"<pre><code># test push\nj dagger-test-push-local\n\n# show recipes\nj dagger-\nj dagger-test\nj dagger-build\n\n# CI\nj dagger-ci\n</code></pre>"},{"location":"Demo/#nuvola-docs","title":"nuvola-docs","text":"<pre><code># serve docs\nj serve\n\n# build container\nj cnt-build-push-restart\n</code></pre>"},{"location":"Demo/#nuvola_assets","title":"nuvola/_assets","text":"<pre><code># register\nj register-runner &lt;token&gt;\n\n# start\nj start-runner\n</code></pre>"},{"location":"Demo/#go-back-to-nuvola-4","title":"Go back to Nuvola 4","text":"<pre><code># Stop current cluster\nk3d cluster stop ${K3D_CLUSTER}\n\n# Start old cluster\nk3d cluster start nuvola-4\n\n# Merge kubeconfig\nk3d kubeconfig merge -d nuvola-4\n\n# check\nkubectl get po -A\n</code></pre>"},{"location":"Errors-pushing-Gitea/","title":"Strange errors during docker push to Gitea Container Registry","text":"<p>If the image tag is:</p> <p><code>git.localtest.me/aruba-demo/fastapi-uv:v0.3.7-9</code></p> <p>The container image is accepted. If it's instead:</p> <p><code>git.localtest.me/aruba-demo/fastapi-uv/fastapi-uv:v0.3.7-9</code></p> <p>The push fails, unless the last - is replaced with _ :</p> <p><code>git.localtest.me/aruba-demo/fastapi-uv/fastapi-uv:v0.3.7_9</code></p>"},{"location":"Gitea%20access%20API/","title":"Gitea: access the API","text":"<p>Reference:</p> <ul> <li>https://docs.gitea.com/development/api-usage#api-guide</li> <li>https://gitea.com/api/swagger#/repository/updateRepoSecret</li> <li>https://docs.gitea.com/usage/usage/secrets</li> </ul> <pre><code># Set vars\nGITEA_USERNAME=\"aruba-demo\"\n\nGITEA_HOSTNAME=\"git.localtest.me\"\nGITEA_USERNAME=\"$(op read 'op://Private/ujfrvzi2gwbjozczjg2cjl27v4/username')\"\nGITEA_PASSWORD=\"$(op read 'op://Private/ujfrvzi2gwbjozczjg2cjl27v4/password')\"\n\n# Starting point\ncurl -H \"Content-Type: application/json\" -d '{\"name\":\"test\"}' -u ${GITEA_USERNAME}:${GITEA_PASSWORD} \\\n  https://${GITEA_HOSTNAME}/api/v1/users/${GITEA_USERNAME}/tokens\n\n# Updated command\ncurl -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"test\",\"scopes\":[\"write:repository\",\"write:user\"]}' \\\n  -u ${GITEA_USERNAME}:${GITEA_PASSWORD} \\\n  https://${GITEA_HOSTNAME}/api/v1/users/${GITEA_USERNAME}/tokens\n\n# Successful response with token\n{\"id\":1,\"name\":\"test\",\"sha1\":\"9fcb1158165773dd010fca5f0cf7174316c3e37d\",\"token_last_eight\":\"16c3e37d\"}\n\n# \u2705 Automated\nGITEA_AUTH_TOKEN=$(curl -s -H \"Content-Type: application/json\" \\\n  -d '{\"name\":\"test\",\"scopes\":[\"write:repository\",\"write:user\"]}' \\\n  -u ${GITEA_USERNAME}:${GITEA_PASSWORD} \\\n  https://${GITEA_HOSTNAME}/api/v1/users/${GITEA_USERNAME}/tokens | yq '.sha1' -r)\necho ${GITEA_AUTH_TOKEN}\n\n# Create a secret (with the op secret reference)\ncurl -v -X PUT \\\n  \"https://${GITEA_HOSTNAME}/api/v1/repos/${GITEA_USERNAME}/fastapi-uv/actions/secrets/REGISTRY_PASSWORD\" \\\n  -H \"accept: application/json\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: token caaa8dd79d5b9372b4f4e15eddc9008773327c92\" \\\n  -d \"{\n  \\\"data\\\": \\\"$(op read 'op://Private/ujfrvzi2gwbjozczjg2cjl27v4/password')\\\"\n}\"\n\n# \u2705 Create a secret using the GITEA_PASSWORD env var\ncurl -v -X PUT \\\n  \"https://${GITEA_HOSTNAME}/api/v1/repos/${GITEA_USERNAME}/fastapi-uv/actions/secrets/REGISTRY_PASSWORD\" \\\n  -H \"accept: application/json\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: token ${GITEA_AUTH_TOKEN}\" \\\n  -d \"{\n  \\\"data\\\": \\\"${GITEA_PASSWORD}\\\"\n}\"\n</code></pre>"},{"location":"Gitea-Actions/","title":"Gitea Actions","text":"<p>Login to Container Registry:</p> <ul> <li>https://docs.gitea.com/usage/packages/container#login-to-the-container-registry</li> </ul> <p>Generate Token for Registry access:</p> <ul> <li>https://docs.gitea.com/development/api-usage#generating-and-listing-api-tokens</li> </ul>"},{"location":"Install-on-GCP/","title":"Install on GCP","text":""},{"location":"Install-on-GCP/#option-a-using-gcpbootstrap","title":"Option A: Using ./gcp/bootstrap/","text":"<pre><code># Create namespaces first\nkubectl apply -f ./gcp/bootstrap/ns-traefik.yaml -f ./gcp/bootstrap/ns-argocd.yaml\n\n# Create the rest of the resources\nkubectl apply -f ./gcp/bootstrap/\n</code></pre>"},{"location":"Install-on-GCP/#option-b-with-helm","title":"Option B: with Helm","text":"<pre><code># Install Traefik\nhelm upgrade --install traefik traefik/traefik --namespace traefik --create-namespace -f ./traefik/values.yaml\n\n# Install ArgoCD\nhelm upgrade --install argocd argo/argo-cd -n argocd --create-namespace --values argocd/values.yaml\n</code></pre>"},{"location":"Old-Docs-Snippets/","title":"Old Docs Snippets","text":""},{"location":"Old-Docs-Snippets/#old-docs-snippets","title":"Old docs snippets","text":"<p>Other certs</p> <pre><code># ArgoCD\nkubectl create -n argocd secret tls argocd-server-tls \\\n    --cert=argocd.localhost.pem --key=argocd.localhost-key.pem \\\n    --dry-run=client -o yaml | kubectl neat &gt; secret-tls-argocd-server-tls.yaml\n\n# Create\nkubectl apply -f secret-tls-argocd-server-tls.yaml\n\n# Wildcard\nkubectl create -n traefik secret tls wildcard-localhost-tls \\\n    --cert=_wildcard.localhost.pem --key=_wildcard.localhost-key.pem \\\n    --dry-run=client -o yaml | kubectl neat &gt; secret-tls-wildcard-localhost.yaml\n</code></pre>"},{"location":"Quick-Start-Tests/","title":"Quick Start Tests","text":""},{"location":"Quick-Start-Tests/#test","title":"Test","text":"<pre><code># GITEA_HOST=\"git.localhost\"\nGITEA_HOST=\"git.localtest.me\"\n\n# Test\ncd fastapi-uv\ngit push local\ndagger call test-publish-local --registry ${GITEA_HOST}\n\ncd nuvola\ngit push local\n\ncd fastapi-demo\ngit push local\n\ndocker push ${GITEA_HOST}/aruba-demo/alpine:latest\n</code></pre>"},{"location":"Quick-Start-Tests/#check-httphttps-access","title":"Check http/https access","text":"<pre><code>#\nhttp --verify no https://${GITEA_HOST}\n</code></pre>"},{"location":"Quick-Start-Tests/#verify-certificate","title":"Verify Certificate","text":"<pre><code># check ${GITEA_HOST} certificate\nopenssl s_client -showcerts -connect ${GITEA_HOST}:443 &lt;/dev/null | bat -l yaml\n</code></pre>"},{"location":"Quick-Start-Tests/#git-push","title":"Git Push","text":"<p>Reference:</p> <p>Configure git with self-signed CA and Certs</p> <ul> <li>https://stackoverflow.com/questions/11621768/how-can-i-make-git-accept-a-self-signed-certificate</li> </ul> <pre><code># Check remote\ngit remote -v\ngit remote remove local\n\n# Set \"local\" remote\ngit remote add local https://${GITEA_HOST}/aruba-demo/$(basename \"${PWD}\").git\n\n# Set upstream and push\ngit -c http.sslVerify=false push -u local main\n# same as\nGIT_SSL_NO_VERIFY=true git push -u local main\n# or\nexport GIT_SSL_NO_VERIFY=true\ngit push -u local main\n\n# Subsequent push to local\ngit -c http.sslVerify=false push local\n</code></pre>"},{"location":"Readme%20Act-Runners%20on%20docker/","title":"Act Runner","text":""},{"location":"Readme%20Act-Runners%20on%20docker/#update-token-in-vault","title":"Update token in Vault","text":"<pre><code>#gitea --config /etc/gitea/app.ini actions generate-runner-token\n\n\n# After a Gitea reinstallation, get the current (old) token from Vault\n# using tr to remove both newline and carriage return\n\nkubectl exec -n git --stdin=true --tty=true $(kubectl get pods -n git -l 'app.kubernetes.io/name=gitea,app.kubernetes.io/component!=token-job,app.kubernetes.io/instance=gitea' -o name) -c gitea -- /bin/sh -c \"gitea actions generate-runner-token\"\n\nGITEA_RUNNER_REGISTRATION_TOKEN=$(kubectl exec -n git --stdin=true --tty=true $(kubectl get pods -n git -l 'app.kubernetes.io/name=gitea,app.kubernetes.io/component!=token-job,app.kubernetes.io/instance=gitea' -o name) -c gitea -- /bin/sh -c \"gitea actions generate-runner-token\" | tr -d '\\r\\n')\n\necho ${GITEA_RUNNER_REGISTRATION_TOKEN}\n\n# Verify no newline\necho -n \"$GITEA_RUNNER_REGISTRATION_TOKEN\" | hexdump -C\n\n# Eventually clean the existing variable\nGITEA_RUNNER_REGISTRATION_TOKEN=$(echo -n \"$GITEA_RUNNER_REGISTRATION_TOKEN\" | tr -d '\\r\\n')\n\n# Check if there is already a Vault token\necho $VAULT_TOKEN\n\n# Get a Vault token to save the current token in Vault:\nexport VAULT_TOKEN=\"$(vault token create -ttl=24h -format=json | jq -r .auth.client_token)\"\n\n# Save the updated Gitea runner registration token in Vault:\nvault kv put secret/gitea/runner-registration-token GITEA_RUNNER_REGISTRATION_TOKEN=\"${GITEA_RUNNER_REGISTRATION_TOKEN}\"\n\n# Check\nvault kv get -format=json -mount=\"secret\" \"gitea/runner-registration-token\" | jq\n</code></pre>"},{"location":"Readme%20Act-Runners%20on%20docker/#start-the-runners","title":"Start the runners","text":"<pre><code># Check that the env var is present (via direnv and teller, requires VAULT_TOKEN to be set)\nteller env\necho ${GITEA_RUNNER_REGISTRATION_TOKEN}\n\n# \ud83d\udca1 If it's a new installation over an old one, remove the old runners registration files\nfdu .runner ./data-{0,1,2}/ | xargs rm -fv\n\n# Start and register the runners\njust start-runner\n\n# In case the env var is not present you can also invoke teller directly\nteller run -- just start-runner\n</code></pre>"},{"location":"Readme%20Act-Runners%20on%20docker/#configuration-in-docker","title":"Configuration in Docker","text":"<ul> <li>https://docs.gitea.com/usage/actions/act-runner#install-with-the-docker-image</li> </ul>"},{"location":"Readme%20Act-Runners%20on%20docker/#start-with-docker-for-debug","title":"Start with docker for debug","text":"<pre><code># start the container\ndocker run -it --network host \\\n  -v ./data-1:/data \\\n  -v ./config.yaml:/config.yaml \\\n  -v ./run.sh:/opt/act/run.sh  \\\n  ghcr.io/kubernetista/act-runner-nuvola:latest bash\n\n# export the required vars\nexport GITEA_RUNNER_NAME=test\nexport GITEA_RUNNER_LABELS=docker\n# export GITEA_RUNNER_LABELS=macos\nexport CONFIG_FILE=/config.yaml\nexport GITEA_HOSTNAME=git.localtest.me\nexport GITEA_INSTANCE_URL=https://${GITEA_HOSTNAME}/\nexport GITEA_RUNNER_REGISTRATION_TOKEN=eOrMkkIqEmbO4SplU9WNLv3TxsBc5E5R2l9nd9DN\n\n# start the entrypoint script\n/opt/act/run.sh\n</code></pre>"},{"location":"Readme%20Act-Runners%20on%20docker/#fixing-problem-in-the-log-below","title":"Fixing problem in the log below","text":"<ul> <li>https://forum.gitea.com/t/cannot-checkout-a-repository-hosted-on-a-gitea-instance-using-self-signed-certificate-server-certificate-verification-failed/7903/4</li> </ul> <pre><code>level=info msg=\"Starting runner daemon\"\nlevel=error msg=\"fail to invoke Declare\" error=\"unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\"\nError: unavailable: tls: failed to verify certificate: x509: certificate signed by unknown authority\nact-runner-root exited with code 1\n</code></pre> <p>The problem was fixed by updating the config.yaml file</p> <pre><code>  # Whether skip verifying the TLS certificate of the Gitea instance.\n  # insecure: false\n  insecure: true\n</code></pre>"},{"location":"Readme%20Act-Runners%20on%20docker/#other","title":"Other","text":"<pre><code>2024-11-17 00:48:56 level=info msg=\"Registering runner, arch=amd64, os=linux, version=v0.2.11.\"\n2024-11-17 00:48:56 level=error msg=\"Invalid input, please re-run act command.\" error=\"instance address is empty\"\n2024-11-17 00:48:56 Waiting to retry ...\n</code></pre>"},{"location":"Readme%20Act-Runners%20on%20docker/#build-a-custom-act-runner-image","title":"Build a custom act-runner image","text":"<ul> <li>https://docs.gitea.com/usage/actions/act-runner#install-with-the-docker-image</li> </ul> <p>To be able to bypass problems with the self-signed CA and the generated TLS certificates it's necessary to build a custom runner, starting from</p> <p><code>ghcr.io/catthehacker/ubuntu:runner-latest</code></p> <ul> <li>https://github.com/catthehacker/docker_images?tab=readme-ov-file</li> </ul> <p>And customizing it to add the certificates, but also to make it more similar to the official act-runner from gitea</p> <p><code>gitea/act_runner:latest</code></p> <ul> <li>https://hub.docker.com/r/gitea/act_runner/tags</li> </ul> <p>Add tini:</p> <ul> <li>https://github.com/krallin/tini</li> </ul> <p>Reference:</p> <ul> <li>https://gitea.com/gitea/act_runner/src/commit/f17cad1bbe0d4a84308a37fb4a5e64211ada7e8a/examples/kubernetes/rootless-docker.yaml</li> <li>https://namesny.com/blog/gitea_actions_k3s_docker/</li> <li>https://forum.gitea.com/t/cannot-checkout-a-repository-hosted-on-a-gitea-instance-using-self-signed-certificate-server-certificate-verification-failed/7903/1</li> <li>https://github.com/nodiscc/xsrv/tree/master/roles/gitea_act_runner</li> <li>https://gitea.com/gitea/act_runner/issues/280</li> <li>https://forum.gitea.com/t/act-runner-in-k8s-fail-to-connect-to-docker-daemon/8736/3</li> <li>https://gist.github.com/mariusrugan/911f5da923c93f3c795d3e84bed9e256</li> </ul>"},{"location":"Readme-Gitea-Runners/","title":"Gitea Runner","text":""},{"location":"Readme-Gitea-Runners/#setup-in-kubernetes","title":"Setup in kubernetes","text":"<p>Get the registration token from:</p> <p>Site Administration -&gt; Actions -&gt; Runners</p> <ul> <li>https://git.localtest.me/admin/actions/runners</li> </ul> <pre><code># set env var\nexport RUNNER_TOKEN=\"aAbBcCdDeEfFgG\"\n\n# update the yaml manifests\n./_scripts/gitea-runner.sh\n\n# Commit and push\ngit add gitea-runner/deploy-root.yaml gitea-runner/secret-runner-token.yaml\ngit commit -m \"update gitea runner config\"\ngit push origin\n\n# refresh gitea-runner app in ArgoCD (or wait a few minutes)\n</code></pre> <p>The Gitea Act Runner should become visible in Active state in the Gitea Runners page.</p>"},{"location":"Readme-Gitea-Runners/#get-the-token-and-register-the-runner-via-script","title":"Get the token and register the runner via script","text":"<pre><code>#!/usr/bin/env bash\n\n# get the gitea server pod name\nPOD_NAME=$(kubectl get pods -n git -l app.kubernetes.io/name=gitea -o jsonpath=\"{.items[0].metadata.\nname}\")\n# get the token using the gitea cli\nGITEA_RUNNER_TOKEN=$(kubectl exec --stdin=true --tty=true -n git $POD_NAME -c  gitea -- /bin/sh -c \"gitea actions generate-runner-token\")\necho ${GITEA_RUNNER_TOKEN}\n# Register\nact_runner register --no-interactive --token  ${GITEA_RUNNER_TOKEN} --instance https://git.localtest.me/\n# Start\nsudo act_runner daemon --config ./runner-config.yaml\n</code></pre>"},{"location":"Readme-Gitea-Runners/#runner-docker-images","title":"Runner docker images","text":"<ul> <li>https://github.com/catthehacker/docker_images/pkgs/container/ubuntu</li> </ul>"},{"location":"Readme-Gitea-Runners/#reference","title":"Reference","text":"<ul> <li>https://gitea.com/gitea/act_runner/src/branch/main/examples/kubernetes</li> </ul>"},{"location":"Readme-Gitea-Runners/#fix-1","title":"Fix 1","text":"<ul> <li>https://namesny.com/blog/gitea_actions_k3s_docker/</li> <li>https://github.com/catthehacker/docker_images/pkgs/container/ubuntu/282279167?tag=act-latest-20241001</li> </ul>"},{"location":"Readme-Gitea-Runners/#other-fixes","title":"Other fixes","text":"<ul> <li>https://gitea.com/gitea/act_runner/issues/280</li> <li>https://hub.docker.com/_/docker/tags?name=dind</li> <li>https://forum.gitea.com/t/act-runner-in-k8s-fail-to-connect-to-docker-daemon/8736/8</li> <li>https://gist.github.com/mariusrugan/911f5da923c93f3c795d3e84bed9e256</li> </ul>"},{"location":"Readme-Gitea-Runners/#catthehacker-act-runner-docker-images","title":"catthehacker act runner docker images","text":"<p>https://github.com/catthehacker/docker_images/tree/master https://github.com/catthehacker/docker_images/pkgs/container/ubuntu/versions?filters%5Bversion_type%5D=tagged</p>"},{"location":"Readme-Gitea-Runners/#run-the-act-runner-external-containerrunner-directly","title":"Run the act-runner (external container/runner) directly","text":"<pre><code># the Act runner config files are in _assets/\ncd ./_assets/\n\n# generate a config file\nact_runner generate-config &gt; ./gitea-runner/config/runner-config.yaml\n\n# edit the file\n# ...\n\n# start act_runner with the new config file\nsudo act_runner daemon --config ./runner-config.yaml\n</code></pre>"},{"location":"Readme-Gitea-Runners/#get-the-certificates-from-traefik","title":"Get the certificates from Traefik","text":"<p>To be able to push to the Gitea container registry, it's needed to access it via HTTPS (why\u2753\u2753), so the easiest way is to build the container using docker inside the act_runner container</p> <ul> <li>ghcr.io/catthehacker/ubuntu:runner-latest</li> </ul> <p>My customized version actually, running the root user, built with the dockerfile <code>../fastapi-demo/runner-root.dockerfile</code></p> <ul> <li>ghcr.io/kubernetista/runner-root:v2</li> </ul> <p>This works and has been tested already, I'm able to build a container inside the local act runner, it still creates another container in docker, where the docker client actually runs and all the good stuff.</p> <p>But I still need to add the certificates to be able to push to the Gitea Container Registry.</p> <p>To make it work, follow the instructions:</p> <ul> <li>https://forum.gitea.com/t/cannot-checkout-a-repository-hosted-on-a-gitea-instance-using-self-signed-certificate-server-certificate-verification-failed/7903</li> </ul> <pre><code>#\nkubectl get configmap kube-root-ca.crt -n traefik -o jsonpath='{.data.ca\\.crt}' &gt; ca.crt\n</code></pre>"},{"location":"Readme-Gitea-Runners/#run-the-runner-root-internal-container-with-docker-compose","title":"Run the runner-root (internal container) with docker compose","text":"<pre><code>cd _assets/\ndocker compose up\n# docker compose up -d\n</code></pre>"},{"location":"Readme-Usage/","title":"Use Nuvola","text":""},{"location":"Readme-Usage/#argo-workflows","title":"Argo Workflows","text":"<pre><code># Submit a job\nargo submit --serviceaccount argo-workflow https://raw.githubusercontent.com/argoproj/argo-workflows/master/examples/hello-world.yaml --watch\n</code></pre>"},{"location":"Readme-Usage/#argo-events","title":"Argo Events","text":"<pre><code># Deploy the default (NatsStreaming based) EventBus\nkubectl apply -n ${RESOURCE_NS} -f eventBus.yaml\n</code></pre>"},{"location":"Readme-Usage/#todo-dagger","title":"TODO: Dagger","text":""},{"location":"Readme-k3d-k3s-bootstrap-updates/","title":"Bootstrap k3d / k3s","text":""},{"location":"Readme-k3d-k3s-bootstrap-updates/#keep-the-k3d-bootstrap-manifests-updated","title":"Keep the k3d bootstrap manifests updated","text":""},{"location":"Readme-k3d-k3s-bootstrap-updates/#reference","title":"Reference","text":"<ul> <li>https://k3d.io/v5.7.4/usage/configfile/</li> <li>https://docs.k3s.io/installation/packaged-components</li> <li>https://docs.k3s.io/helm</li> <li>https://github.com/k3s-io/helm-controller/</li> <li>https://docs.k3s.io/advanced</li> <li>https://docs.k3s.io/installation/configuration#configuration-file</li> </ul> <p>Other options to deploy k3s, including in cloud like AWS and GCP:</p> <ul> <li>https://docs.k3s.io/related-projects</li> </ul> <p>HelmCharts and HelmChartsConfig are k3s native alternatives to the rendered helm manifests used below.</p>"},{"location":"Readme-k3d-k3s-bootstrap-updates/#cli","title":"CLI","text":"<p>Keep bootstrap manifests updated</p> <pre><code># ArgoCD\nhelm template argocd argo/argo-cd -n argocd --create-namespace --values argocd/values.yaml &gt; ./k3d/bootstrap/argocd-manifests.yaml\n\n# Traefik\nhelm template traefik traefik/traefik -n traefik --create-namespace -f ./traefik/values.yaml &gt; ./k3d/bootstrap/traefik-manifests.yaml\n\n# App of apps\ncp ./apps/apps.yaml ./k3d/bootstrap/\n</code></pre>"},{"location":"Readme-mark1/","title":"Manual set up of the Nuvola environment (Mark 1)","text":""},{"location":"Readme-mark1/#create-k3d-cluster","title":"Create k3d cluster","text":"<pre><code># Check Clusters and Registries already present\nk3d cluster list\nk3d registry list\n\n# \ud83d\udcda Create Registry\n# k3d registry create registry --port ${K3D_REGISTRY_PORT}\n\n# Check latest k3s version available\nk3d version list k3s | head\n\n# Create k3d configuration from template\nenvsubst &lt; ./k3d/template/k3d-nuvola-cluster-config_TEMPLATE.yaml &gt; ./k3d/cluster/k3d-nuvola-cluster-config.yaml\n\n# Just \u2696\ufe0f\njust k3d-cluster-generate-config\n\n# Just \u2696\ufe0f\njust k3d-cluster-create\n\n#\n</code></pre>"},{"location":"Readme-mark1/#install-traefik","title":"Install Traefik","text":"<pre><code># Add helm repo and update\nhelm repo add traefik https://traefik.github.io/charts\nhelm repo update\n\n# \u2705 Install Traefik\nhelm upgrade --install traefik traefik/traefik -n traefik --create-namespace --wait  -f ./traefik/values.yaml\n</code></pre>"},{"location":"Readme-mark1/#install-argocd","title":"Install ArgoCD","text":"<pre><code># Set up Helm repo\nhelm repo add argo https://argoproj.github.io/argo-helm\nhelm repo update\n\n# \u2705 Install with Helm\nhelm upgrade --install argocd argo/argo-cd -n argocd --create-namespace --wait --values ./argocd/values.yaml\n\n# \ud83d\udd0e Get password\nargocd admin initial-password -n argocd | head -n 1\n# Or\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d ;  echo\n\n# Login from CLI\nargocd login --insecure --grpc-web --username admin argocd.localhost:8443\n# argocd login --insecure --username admin argocd.localhost:8443\n</code></pre>"},{"location":"Readme-mark1/#add-argocd-apps","title":"Add ArgoCD apps","text":"<pre><code># Add ArgoCD and Traefik apps\nkubectl apply -f argocd/argocd.yaml -f apps/traefik.yaml\n\n# Add all the other apps/\nkubectl apply -f apps/apps.yaml\n</code></pre>"},{"location":"Readme-mark1/#temp-start-traefik-with-docker-compose","title":"TEMP \u23f3 : start Traefik with docker compose","text":"<pre><code># Switch to project\ncd ../traefik-mkcert-docker/\n\n# Just \u2696\ufe0f : start traefik\njust restart-traefik\n</code></pre>"},{"location":"Readme-mark1/#browse","title":"Browse","text":"<p>Open:</p> <ul> <li>Gittea</li> <li>ArgoCD</li> <li>Traefik Dashboard (Internal)</li> <li>Traefik Dashboard (External)</li> <li>Whoami demo app</li> <li>Anything else</li> </ul> <pre><code>#\n</code></pre>"},{"location":"Readme-mark2/","title":"Set up Nuvola environment (Mark 2)","text":""},{"location":"Readme-mark2/#install-argocd-with-helm","title":"Install ArgoCD with Helm","text":"<pre><code># Set up Helm repo\nhelm repo add argo https://argoproj.github.io/argo-helm\nhelm repo update\n\n# \u2705 Install with Helm\nhelm upgrade --install argocd argo/argo-cd -n argocd --create-namespace --wait \\\n  --values argocd/values.yaml\n\n# \ud83d\udd0e Get password\nargocd admin initial-password -n argocd | head -n 1\n# Or\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d ;  echo\n\n# Login from CLI\nargocd login --insecure --grpc-web --username admin argocd.localhost:8443\n# argocd login --insecure --username admin argocd.localhost:8443\n</code></pre>"},{"location":"Readme-mark2/#add-argocd-apps","title":"Add ArgoCD apps","text":"<pre><code># Add ArgoCD and Traefik apps\nkubectl apply -f argocd/argocd.yaml -f apps/traefik.yaml\n\n# Add all the other apps/\nkubectl apply -f apps/apps.yaml\n</code></pre>"},{"location":"Readme-mark2/#continue-the-setup-in-readme1-argocd-inside-project-argocd-setup","title":"\ud83d\uded1 Continue the setup in Readme1-ArgoCD, inside project ArgoCD-Setup","text":""},{"location":"Readme-mark2/#push-image-used-by-the-whoami-app-to-the-k3d-registry","title":"Push image used by the whoami app to the k3d-registry","text":"<pre><code>docker tag traefik/whoami registry.localhost:5000/traefik-whoami\ndocker push registry.localhost:5000/traefik-whoami\n</code></pre>"},{"location":"Readme-mark2/#push-this-git-repo-to-local-gitea","title":"Push this git repo to local Gitea","text":"<pre><code># add Gitea remote (execute from the git repo base directory)\ngit remote add local http://git.localhost:8000/aruba-demo/$(basename \"${PWD}\").git\n\n# Push and create a public repo\ngit push -o repo.private=false -u local main\n</code></pre>"},{"location":"Readme-mark2/#configure-gitea-runner","title":"Configure Gitea Runner","text":"<p>Get the Runner Registration Token</p> <pre><code># for the gitea instance\nopen &lt;http://git.localhost:8000/admin/actions/runners&gt;\n\n# or for the current user\nopen &lt;http://git.localhost:8000/user/settings/actions/runners&gt;\n\n# Click \ud83d\uddb1\ufe0f on \"Create new Runner\" and copy \ud83d\udcd1 the REGISTRATION TOKEN\n\n\n# Set the RUNNER_TOKEN env variable\nexport RUNNER_TOKEN=\"&lt;token&gt;\"\necho ${RUNNER_TOKEN}\n\n# Base64 encode the token\n# export RUNNER_TOKEN_B64=$(echo ${RUNNER_TOKEN} | base64)\n# echo ${RUNNER_TOKEN_B64}\n\n# Update \ud83d\udccb  the token in the Runner deployment\n./scripts/gitea-runner.sh\n# yq\n\n# Commmit the updated token deployment\ngit add gitea-runner/rootless.yaml\ngit commit -m \"update gitea-runner token\"\n\n# Git push, either to the remote repo or to the local gitea instance\ngit push local main\n# git push origin main\n</code></pre>"},{"location":"Readme-quick-setup-mark3/","title":"Nuvola Quick setup (&amp; problems) - Mark 3","text":""},{"location":"Readme-quick-setup-mark3/#setup","title":"Setup","text":"<p>Do I still need port 2222 (\u2705) and 3000 (\u274c) \u2753\u2753</p> <pre><code># Create (with the config already created and updated)\ncd nuvola\n\n#\necho ${K3D_CLUSTER}\n\n#\njust k3d-cluster-generate-config\n\n#\njust k3d-cluster-create\n\n#\nkubectl apply -f secrets/\n\n#\nargocd admin initial-password -n argocd | head -n 1\n</code></pre>"},{"location":"Readme-quick-setup-mark3/#generate-a-certificate-with-mkcert-and-add-it-to-the-gitea-ingress","title":"Generate a certificate with mkcert, and add it to the Gitea Ingress","text":"<pre><code># Generate the certs with expiration in 20gg using kixelated/mkcert\ncd kixelated-mkcert\n\n# Generate\n./mkcert -days=20 '*.localtest.me'\n\n# Check\nopenssl x509 -in _wildcard.localtest.me.pem -noout -text | bat -l yaml\n\n# Copy the files to the nuvola repo, in a directory excluded from git\ncp _wildcard.localtest.me* ../_nuvola/nuvola/_assets/secrets/\n\n# Eventually the other certs are in the project `traefik-mkcert-docker`\ncd traefik-mkcert-docker/certs\n\n# Switch to the directory containing the certs\ncd nuvola/_assets/secrets\n\n# Rename\nCERT_NAME=\"wildcard-localtest-me\"\nmv _wildcard.localtest.me.pem  ${CERT_NAME}.pem\nmv _wildcard.localtest.me-key.pem  ${CERT_NAME}-key.pem\n\n# Generate kubernetes secret with the cert ${CERT_NAME}.pem\nkubectl create -n default secret tls ${CERT_NAME}-tls \\\n    --cert=${CERT_NAME}.pem --key=${CERT_NAME}-key.pem \\\n    --dry-run=client -o yaml | kubectl neat &gt; secret-tls-${CERT_NAME}.yaml\n\n# Create\nkubectl apply -f secret-tls-${CERT_NAME}.yaml\n\n# Restart Traefik to load the new cert\nkubectl rollout restart deployment traefik -n traefik\n\n# Get the ArgoCD initial password and open the web UI\nargocd admin initial-password -n argocd | head -n 1\n</code></pre>"},{"location":"Readme-quick-setup-mark3/#next-steps-check-the-vault-eso-readme","title":"Next steps: check the Vault-ESO Readme","text":""},{"location":"Readme-quick-setup-mark3/#test","title":"Test","text":"<pre><code># GITEA_HOST=\"git.localhost\"\nGITEA_HOST=\"git.localtest.me\"\n\n# Test\ncd fastapi-uv\ngit push local\ndagger call test-publish-local --registry ${GITEA_HOST}\n\ncd nuvola\ngit push local\n\ncd fastapi-demo\ngit push local\n\ndocker push ${GITEA_HOST}/aruba-demo/alpine:latest\n</code></pre>"},{"location":"Readme-quick-setup-mark3/#check-httphttps-access","title":"Check http/https access","text":"<pre><code>#\nhttp --verify no https://${GITEA_HOST}\n</code></pre>"},{"location":"Readme-quick-setup-mark3/#verify-certificate","title":"Verify Certificate","text":"<pre><code># check ${GITEA_HOST} certificate\nopenssl s_client -showcerts -connect ${GITEA_HOST}:443 &lt;/dev/null | bat -l yaml\n</code></pre>"},{"location":"Readme-quick-setup-mark3/#git-push","title":"Git Push","text":"<p>Reference:</p> <p>Configure git with self-signed CA and Certs</p> <ul> <li>https://stackoverflow.com/questions/11621768/how-can-i-make-git-accept-a-self-signed-certificate</li> </ul> <pre><code># Check remote\ngit remote -v\ngit remote remove local\n\n# Set \"local\" remote\ngit remote add local https://${GITEA_HOST}/aruba-demo/$(basename \"${PWD}\").git\n\n# Set upstream and push\ngit -c http.sslVerify=false push -u local main\n# same as\nGIT_SSL_NO_VERIFY=true git push -u local main\n# or\nexport GIT_SSL_NO_VERIFY=true\ngit push -u local main\n\n# Subsequent push to local\ngit -c http.sslVerify=false push local\n</code></pre>"},{"location":"Readme-quick-setup-mark3/#traefik","title":"Traefik","text":"<p>See above for Option 1</p>"},{"location":"Readme-quick-setup-mark3/#option-2-update-traefik-and-make-it-use-the-mkcert-custom-ca","title":"Option 2: update Traefik and make it use the mkcert custom CA","text":"<p>Reference:</p> <ul> <li>How to do it with Docker compose</li> <li>https://medium.com/@clintcolding/use-your-own-certificates-with-traefik-a31d785a6441</li> </ul> <p>Relevant part of Helm values:</p> <pre><code># -- Add volumes to the traefik pod. The volume name will be passed to tpl.\n# This can be used to mount a cert pair or a configmap that holds a config.toml file.\n# After the volume has been mounted, add the configs into traefik by using the `additionalArguments` list below, eg:\n`additionalArguments:\n- \"--providers.file.filename=/config/dynamic.toml\"\n# - \"--ping\"\n# - \"--ping.entrypoint=web\"`\nvolumes:\n- name: public-cert\n  mountPath: \"/certs\"\n  type: secret\n- name: '{{ printf \"%s-configs\" .Release.Name }}'\n  mountPath: \"/config\"\n  type: configMap\n</code></pre>"},{"location":"Readme-quick-setup-mark3/#old-docs-snippets","title":"Old docs snippets","text":"<p>Other certs</p> <pre><code># ArgoCD\nkubectl create -n argocd secret tls argocd-server-tls \\\n    --cert=argocd.localhost.pem --key=argocd.localhost-key.pem \\\n    --dry-run=client -o yaml | kubectl neat &gt; secret-tls-argocd-server-tls.yaml\n\n# Create\nkubectl apply -f secret-tls-argocd-server-tls.yaml\n\n# Wildcard\nkubectl create -n traefik secret tls wildcard-localhost-tls \\\n    --cert=_wildcard.localhost.pem --key=_wildcard.localhost-key.pem \\\n    --dry-run=client -o yaml | kubectl neat &gt; secret-tls-wildcard-localhost.yaml\n</code></pre>"},{"location":"Readme/","title":"Quick Start","text":"<p>You need Docker Desktop running.</p>"},{"location":"Readme/#1-create-a-kubernetes-cluster","title":"1. Create a Kubernetes cluster","text":"<p>Create a Kubernetes cluster with k3d/k3s</p> <pre><code># Create (with the config already created and updated)\ncd nuvola\n\n# Set it explicitly or loaded from direnv .envrc\n# export K3D_CLUSTER=\"nuvola-1\"\necho ${K3D_CLUSTER}\n\n# Generate the k3d configuration (using a Just recipe)\njust k3d-cluster-generate-config\n\n# Create the k3d cluster\njust k3d-cluster-create\n</code></pre>"},{"location":"Readme/#2-check-argocd-deployment-progress","title":"2. Check ArgoCD deployment progress","text":"<p>To check the ArgoCD deployment progesess, open the ArgoCD web UI and login with user \"admin\" and the initial password (see below)</p> <ul> <li>ArgoCD : <code>http://argocd.localhost</code></li> </ul> <p>You can do the same using the CLI only:</p> <pre><code># Watch pod creation, until ArgoCD is deployed\nkubectl get pod -A -w\n\n# Get the ArgoCD initial password\nargocd admin initial-password -n argocd | head -n 1\n\n# Login to ArgoCD\nargocd login --insecure --grpc-web --username admin argocd.localtest.me\n\n# Refresh the app-of-apps (to speed up the process)\nargocd app get &lt;appName&gt; --hard-refresh\n\n# Check progress\nargocd app wait apps --health --sync\n</code></pre>"},{"location":"Readme/#wait-until-the-git-namespace-is-ready-then-proceed-creating-the-secrets","title":"Wait until the git namespace is ready, then proceed creating the secrets","text":"<pre><code># Wait until the 'git' namespace exists\ntime until kubectl get namespace git &gt;/dev/null 2&gt;&amp;1; do\n  sleep 1\ndone\n# Then create the required secrets\nkubectl apply -f secrets/\n</code></pre>"},{"location":"Readme/#certificate-for-https-using-kixelatedmkcert","title":"Certificate for HTTPS (using kixelated/mkcert)","text":"<p>Todo</p> <p>\u2611\ufe0f TODO: replace the steps below with a container or a Dagger module \u2611\ufe0f</p> <p>Generate a new TLS certificate with kixelated/mkcert, and add it tp Traefik.</p> <p>The certificate will last 20 days (for security reasons) but you can adjust it.</p> <p>Warning</p> <p>\ud83d\udeeb If you already have a valid certificate, for example because you already generated it following the steps below, then jump to step 4 \ud83d\udeeb</p>"},{"location":"Readme/#3-generate-the-certs","title":"3. Generate the certs","text":"<pre><code># Generate the certs with expiration in 20gg using kixelated/mkcert\ncd kixelated-mkcert\n\n# Generate\n./mkcert -days=20 \"*.localtest.me\"\n\n# Check\nopenssl x509 -in _wildcard.localtest.me.pem -noout -text | bat -l yaml\n\n# Copy the files to the nuvola repo, in a directory excluded from git\ncp _wildcard.localtest.me* ../_nuvola/nuvola/_assets/secrets/\n\n# Switch to the directory containing the certs\ncd nuvola/_assets/secrets\n\n# Rename\nCERT_NAME=\"wildcard-localtest-me\"\nmv _wildcard.localtest.me.pem  ${CERT_NAME}.pem\nmv _wildcard.localtest.me-key.pem  ${CERT_NAME}-key.pem\n\n# Generate kubernetes secret with the cert ${CERT_NAME}.pem\nkubectl create -n default secret tls ${CERT_NAME}-tls \\\n    --cert=${CERT_NAME}.pem --key=${CERT_NAME}-key.pem \\\n    --dry-run=client -o yaml | kubectl neat &gt; secret-tls-${CERT_NAME}.yaml\n</code></pre>"},{"location":"Readme/#4-install-the-certificates-and-reload-traefik","title":"4. Install the certificates and reload Traefik","text":"<pre><code># Switch to the directory containing the certs\ncd nuvola/_assets/secrets\n\n# Create the secret containing the TLS certificate and its key\nCERT_NAME=\"wildcard-localtest-me\"\nkubectl apply -f secret-tls-${CERT_NAME}.yaml\n\n# Restart Traefik to load the new cert\n# kubectl rollout restart deployment traefik -n traefik\n</code></pre> <p>Check ArgoCD with the TLS certificate:</p> <ul> <li>ArgoCD : <code>https://argocd.localtest.me</code></li> </ul>"},{"location":"Readme/#5-configure-vault-and-external-secrets","title":"5. Configure Vault and External Secrets","text":"<p>Info</p> <p>Vault is currently being configured in Development mode, so at every restart of the container the secrets and the configuration are reset to the default values.</p> <p>Therefore, the steps below will be required at every Docker Desktop or laptop restart.</p> <p>Without configuring Vault and ExternalSecrets many features will be missing, so:</p> <pre><code># Switch to the ExternalSecrets helm projext\ncd external-secrets-helm\n\n# Wait for vault to be ready\nkubectl wait -n vault --for=condition=ready pod -l app.kubernetes.io/instance=vault\n\n# Run the setup script using Just\njust setup-vault-eso-test-app\n</code></pre>"},{"location":"Readme/#6-push-a-local-repo-to-git-and-start-building","title":"6. Push a local repo to git and start building","text":"<p>Using a Just recipe, push the Nuvola git repository to Gitea running on Nuvola</p> <pre><code># Push to git creating the repo as public\njust git-push-local\n</code></pre> <p>This step is not required, it's just to show how easy it is to get started with your next project.</p>"},{"location":"Readme/#configuration-completed","title":"\ud83c\udf89 Configuration completed","text":"<p>Congratulations, your Nuvola is ready! \u2601\ufe0f</p> <p>Explore the documentation home to discover the full range of tools Nuvola offers.</p> <p>\u2601\ufe0f Enjoy!</p>"},{"location":"Readme/#troubleshooting","title":"Troubleshooting","text":"<p>If some resources are unavailable wia the browser, it could be due to Traefik: restart it.</p> <pre><code># Restart Traefik\nkubectl rollout restart deployment traefik -n traefik\n</code></pre>"},{"location":"Required-CLI-tools/","title":"Required CLI tools","text":"<ul> <li>k3d</li> <li>argocd</li> <li>curl</li> <li>direnv</li> <li>fd</li> <li>git</li> <li>just</li> <li>kubectl</li> <li>op (1password CLI)</li> <li>bitwarden-cli (?)</li> <li>pwgen</li> <li>rg</li> <li>tailscale</li> <li>vault</li> <li>teller@1.5.6 (Not 2.x.x)</li> <li>yq</li> <li>jq</li> <li>gh</li> </ul>"},{"location":"Required-CLI-tools/#_1","title":"?","text":"<ul> <li>httpie</li> </ul>"},{"location":"Secrets-in-Vault/","title":"Secrets in Vault","text":""},{"location":"Secrets-in-Vault/#get-a-temporary-vault-token-24h-to-access-vault-via-cli","title":"Get a temporary Vault token (24h) to access Vault via CLI","text":"<pre><code>export VAULT_TOKEN=\"$(vault token create -ttl=24h -format=json | jq -r .auth.client_token)\"\n</code></pre>"},{"location":"Secrets-in-Vault/#list-all-the-vault-kv-secrets","title":"List all the Vault (KV) secrets","text":"<pre><code>vault kv list secret\n# descend the available paths\nvault kv list secret/gitea\n\n# get a secret below the root level\nvault kv get -mount=\"secret\" \"tls/wildcard-localtest-me\"\n# this should work too, but sometimes fails with access denied, perhaps due to metadata access missing (check the policy or create a new one)?\nvault kv get secrets/tls/wildcard-localtest-me\n\n\n# Base64 encode of a field with yq\nvault kv get -format=json -mount=\"secret\" \"fake-db-credentials\" | yq '.data.data.password | @base64'\nvault kv get -format=json -mount=\"secret\" \"fake-db-credentials\" | yq '.data.data.password |= @base64' | jq\n</code></pre>"},{"location":"Secrets-in-Vault/#list-of-secrets","title":"List of secrets","text":"<p>Name: <code>gitea/runner-registration-token</code> OLD Name: <code>act-runner</code> Path: <code>/v1/secret/data/gitea/runner-registration-token</code> CLI get: <code>vault kv get -mount=\"secret\" \"gitea/runner-registration-token\"</code> CLI set: <code>vault kv put secret/gitea/runner-registration-token GITEA_RUNNER_REGISTRATION_TOKEN=\"  &lt;token&gt;  \"</code> Content:</p> <p>Procedure to extract the value and save it to Vault after Gitea reinstall</p> <pre><code>export GITEA_RUNNER_REGISTRATION_TOKEN=$(kubectl exec -n git --stdin=true --tty=true $(kubectl match-name -n git gitea) -c gitea -- /bin/sh -c \"gitea actions generate-runner-token\")\n\n# Save the updated Gitea runner registration token in Vault:\nvault kv put secret/gitea/runner-registration-token GITEA_RUNNER_REGISTRATION_TOKEN=\"${GITEA_RUNNER_REGISTRATION_TOKEN}\"\n</code></pre> <pre><code>{\n  \"GITEA_RUNNER_REGISTRATION_TOKEN\": \"KxKgUy419jnwAkkaBhu73PqD7VPbN7nhkKuE8eyY\"\n}\n</code></pre> <p>Name: <code>gitea/admin-credentials</code> OLD Name: <code>gitea-admin-secret</code> Path: <code>/v1/secret/data/gitea/admin-credentials</code> CLI get: <code>vault kv get -mount=\"secret\" \"gitea/admin-credentials\"</code> CLI set: <code>vault kv put secret/gitea/admin-credentials username=\"aruba-demo\" password=\"K4g6@8AtD@V9-7dpiaDv\"</code> Content:</p> <pre><code>{\n  \"username\": \"YXJ1YmEtZGVtbw==\",\n  \"password\": \"TmVPemVyc0NocU45ZnlkbA==\"\n}\n</code></pre> <p>Name: <code>tls/wildcard-localtest-me</code> OLD Name: <code>wildcard-localtest-me-tls</code> Path: <code>/v1/secret/data/tls/wildcard-localtest-me</code> CLI Get: <code>vault kv get -mount=\"secret\" \"tls/wildcard-localtest-me\"</code> CLI Set: <code>vault kv put secret/tls/wildcard-localtest-me tls.crt=@certs/wildcard-localtest-me.pem tls.key=@certs/wildcard-localtest-me-key.pem</code> Content:</p> <pre><code>{\n  \"username\": \"...\",\n  \"password\": \"...\"\n}\n</code></pre>"},{"location":"TEMP-Readme-Traefik-and-Runner/","title":"Temporary startup procedure for Nuvola","text":""},{"location":"TEMP-Readme-Traefik-and-Runner/#startup","title":"Startup","text":"<pre><code># Start Nuvola cluster\nk3d cluster start nuvola-2\n\n# Start external Traefik + Dagger Engine Custom (with mkcert CA)\ncd /_projects/Aruba-DevOps/_dagger/dagger-publish-to-local-registry\ndocker compose --profile full up\n\n# Start macOS act-runner\ncd ~/_projects/Aruba-DevOps/_nuvola/nuvola/_assets\nsudo act_runner daemon --config ./runner-config.yaml\n</code></pre>"},{"location":"TEMP-Readme-Traefik-and-Runner/#test-dagger-on-fastapi-demo-application","title":"Test Dagger on FastAPI demo application","text":"<pre><code>cd ~/_projects/Aruba-DevOps/fastapi-demo\n\ndagger functions\n\ndagger build\n\ndagger publish-local\n\ndagger publish-gitea\n</code></pre>"},{"location":"TODO-Readme-Dagger-Kubernetes/","title":"Dagger","text":""},{"location":"TODO-Readme-Dagger-Kubernetes/#todo-dagger-in-kubernetes-and-argo-workflows","title":"TODO:  Dagger in Kubernetes and Argo Workflows","text":""},{"location":"TODO-Readme-Dagger-Kubernetes/#reference","title":"Reference","text":"<ul> <li>https://docs.dagger.io/integrations/kubernetes/</li> <li>https://docs.dagger.io/integrations/argo-workflows</li> </ul>"},{"location":"TODO-Readme-Dagger-Kubernetes/#cli","title":"CLI","text":"<p>Dagger setup in Kubernetes</p> <pre><code>#\nhelm upgrade --install --namespace=dagger --create-namespace \\\n    dagger oci://registry.dagger.io/dagger-helm\n</code></pre>"},{"location":"TODO-Readme-Easy-Repo-Switch/","title":"Easily switch from GitHub to a local repository","text":""},{"location":"TODO-Readme-Easy-Repo-Switch/#todo","title":"TODO","text":""},{"location":"TODO-Readme-Easy-Repo-Switch/#reference","title":"Reference","text":"<ul> <li>https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories/</li> <li>https://argo-cd.readthedocs.io/en/stable/user-guide/parameters/</li> <li>https://kostis-argo-cd.readthedocs.io/en/refresh-docs/basics/repositories/</li> <li>https://stackoverflow.com/questions/77483203/argocd-application-manifest-with-variables</li> <li>https://github.com/argoproj/argo-cd/blob/6e2f2c9d1e2339b3361f3a057747fcfe30e36f44/docs/operator-manual/application.yaml</li> </ul>"},{"location":"TODO-Readme-Monitoring-and-Logging/","title":"k3s Monitroring and Logging","text":""},{"location":"TODO-Readme-Monitoring-and-Logging/#todo-logging","title":"TODO:  Logging","text":""},{"location":"TODO-Readme-Monitoring-and-Logging/#reference","title":"Reference","text":"<ul> <li>https://docs.k3s.io/advanced#additional-network-policy-logging</li> <li>https://ranchermanager.docs.rancher.com/v2.6/integrations-in-rancher/logging/logging-architecture</li> <li>https://github.com/kube-logging/logging-operator</li> <li>https://kube-logging.dev/docs/quickstarts/single/</li> <li>https://kube-logging.dev/docs/examples/kafka-nginx/</li> </ul>"},{"location":"TODO-Readme-Monitoring-and-Logging/#cli","title":"CLI","text":""},{"location":"TODO-Readme-Monitoring-and-Logging/#add-rancher-logging-operator","title":"Add Rancher Logging Operator","text":"<pre><code># Add Helm repo and update\nhelm repo add rancher-charts https://charts.rancher.io\nhelm repo update\n\n# Install CRDs\nhelm upgrade --install --create-namespace -n cattle-logging-system rancher-logging-crd rancher-charts/rancher-logging-crd\n\n# Install Logging Operator\nhelm upgrade --install --create-namespace -n cattle-logging-system rancher-logging --set additionalLoggingSources.k3s.enabled=true rancher-charts/rancher-logging\n</code></pre>"},{"location":"TODO-Readme-Monitoring-and-Logging/#example-kafka-setup","title":"Example Kafka setup","text":"<pre><code># Install Logging Generator\nhelm upgrade --install --wait --create-namespace --namespace logging log-generator oci://ghcr.io/kube-logging/helm-charts/log-generator\n\n# Install Kafka consumer\nkubectl -n kafka run kafka-consumer -it --image=banzaicloud/kafka:2.13-2.4.0 --rm=true --restart=Never -- /opt/kafka/bin/kafka-console-consumer.sh --bootstrap-server kafka-headless:29092 --topic topic --from-beginning\n</code></pre>"},{"location":"TODO-Readme-Monitoring-and-Logging/#todo-monitoring","title":"TODO: Monitoring","text":""},{"location":"TODO-Readme-Monitoring-and-Logging/#reference_1","title":"Reference","text":"<ul> <li>https://docs.k3s.io/advanced</li> </ul>"},{"location":"TODO-Readme-Monitoring-and-Logging/#cli_1","title":"CLI","text":"<pre><code>#\n</code></pre>"},{"location":"TODO-Readme-Registries-and-Certs/","title":"k3s Registries and Certificates management","text":""},{"location":"TODO-Readme-Registries-and-Certs/#todo-registries","title":"TODO:  Registries","text":""},{"location":"TODO-Readme-Registries-and-Certs/#reference","title":"Reference","text":"<ul> <li>https://docs.k3s.io/installation/private-registry \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f</li> <li>https://docs.k3s.io/installation/registry-mirror</li> <li>https://docs.k3s.io/advanced#using-docker-as-the-container-runtime</li> </ul>"},{"location":"TODO-Readme-Registries-and-Certs/#cli","title":"CLI","text":"<pre><code>#\n</code></pre>"},{"location":"TODO-Readme-Registries-and-Certs/#todo-certificates","title":"TODO: Certificates","text":""},{"location":"TODO-Readme-Registries-and-Certs/#reference_1","title":"Reference","text":"<ul> <li>https://docs.k3s.io/cli/certificate</li> <li>https://github.com/k3s-io/k3s/blob/master/contrib/util/generate-custom-ca-certs.sh</li> <li>https://docs.k3s.io/advanced#certificate-management</li> </ul>"},{"location":"TODO-Readme-Registries-and-Certs/#cli_1","title":"CLI","text":"<pre><code>#\n</code></pre>"},{"location":"Traefik-1/","title":"Traefik","text":""},{"location":"Traefik-1/#option-2-update-traefik-and-make-it-use-the-mkcert-custom-ca","title":"Option 2: update Traefik and make it use the mkcert custom CA","text":"<p>(Option 1 is in the Quick Start)</p> <p>Reference:</p> <ul> <li>How to do it with Docker compose:<ul> <li>https://medium.com/@clintcolding/use-your-own-certificates-with-traefik-a31d785a6441</li> </ul> </li> </ul> <p>Relevant part of the Helm values:</p> <pre><code># -- Add volumes to the traefik pod. The volume name will be passed to tpl.\n# This can be used to mount a cert pair or a configmap that holds a config.toml file.\n# After the volume has been mounted, add the configs into traefik by using the `additionalArguments` list below, eg:\n`additionalArguments:\n- \"--providers.file.filename=/config/dynamic.toml\"\n# - \"--ping\"\n# - \"--ping.entrypoint=web\"`\nvolumes:\n- name: public-cert\n  mountPath: \"/certs\"\n  type: secret\n- name: '{{ printf \"%s-configs\" .Release.Name }}'\n  mountPath: \"/config\"\n  type: configMap\n</code></pre>"},{"location":"Vault-ESO/","title":"Vault &amp; External Secrets configuration step by step","text":"<p>Reference:</p> <ul> <li>https://medium.com/containers-101/gitops-secrets-with-argo-cd-hashicorp-vault-and-the-external-secret-operator-eb1eec1dab0d</li> </ul>"},{"location":"Vault-ESO/#install","title":"Install","text":"<pre><code># Add helm repo\nhelm repo add external-secrets https://charts.external-secrets.io\n\n# Install\nhelm upgrade --install external-secrets external-secrets/external-secrets \\\n    -n external-secrets --create-namespace --wait\n\n# helm upgrade --install external-secrets external-secrets/external-secrets \\\n    # -n external-secrets --create-namespace -f vault.yaml --wait\n</code></pre>"},{"location":"Vault-ESO/#setup-test-application","title":"Setup test application","text":"<p>Use the scripts:</p> <pre><code># set up ExternalSecrets + Vault integration, and the test app\n./setup-vault-eso-test-app.sh\n\n# To reset Vault secrets and configuration, and also remove the ESO integration and the test app\n./reset-vault-eso-test-app.sh\n\n# Update the vault secret to check it's being propagated to the test app\n./increment-vault-secret-version.sh\n</code></pre> <p>Alternatively, do it step by step by following the instructions below.</p>"},{"location":"Vault-ESO/#create-test-secrets","title":"Create test secrets","text":"<pre><code># Set vault address\nexport VAULT_ADDR=\"https://vault.localtest.me\"\n\n# Create a secret named `mysql_credentials` containing url, username and password\nvault kv put secret/mysql_credentials url=\"https://test.example.com\" username=\"test-username\" password=\"test-password\"\n</code></pre>"},{"location":"Vault-ESO/#enable-vault-kubernetes-authentication","title":"Enable vault Kubernetes authentication","text":"<p>Oneliner</p> <pre><code># Oneliner to configure vault via the vault container shell\nkubectl exec --stdin=true --tty=true -n vault vault-0 -- /bin/sh -c \"vault auth enable kubernetes ; sleep 1 ; vault write auth/kubernetes/config kubernetes_host=https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT ; sleep 1 ; vault write auth/kubernetes/role/demo \\\n  bound_service_account_names=* \\\n  bound_service_account_namespaces=* \\\n  policies=default \\\n  ttl=1h\"\n\n# Set the vault address\nexport VAULT_ADDR='https://vault.localtest.me'\n\n# Get the kubernetes service url from the vault container env vars (\ud83d\udea8 doesn't work)\n# export KUBERNETES_SERVICE_URL=$(kubectl exec --stdin=true --tty=true -n vault vault-0 -- /bin/sh -c \"echo https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT\")\n\n# Get the kubernetes service url using kubectl service\nexport KUBERNETES_SERVICE_URL=$(kubectl get svc kubernetes -o json | jq -r '.spec | \"https://\\(.clusterIP):\\(.ports[] | select(.name == \"https\").port)\"')\necho ${KUBERNETES_SERVICE_URL}\n\n# Configure vault\nvault auth enable kubernetes ; sleep 1\nvault write auth/kubernetes/config kubernetes_host=${KUBERNETES_SERVICE_URL} ; sleep 1\nvault write auth/kubernetes/role/demo \\\n  'bound_service_account_names=*' \\\n  'bound_service_account_namespaces=*' \\\n  'policies=default' \\\n  'ttl=1h'\n\n# Read the default policy, and add the new policy at the end\nvault policy read default &gt; vault-default-policy.hcl\ncat vault-default-policy.hcl vault-policy-addendum.hcl &gt; vault-new-policy.hcl\n\n# Write the new policy\nvault policy write default vault-new-policy.hcl\n\n# Create a secret named `mysql_credentials` containing url, username and password\n# PREFIX is used to test the changes\nPREFIX=\"11-\"\n# Set the secret in vault\nvault kv put secret/mysql_credentials url=\"https://${PREFIX}test.example.com\" username=\"${PREFIX}test-username\" password=\"${PREFIX}test-password\"\n</code></pre> <p>Set up vault-ESO test application</p> <pre><code># Deploy test application\nkubectl apply -f ./vault-test-app/\n</code></pre> <p>Checks, or debugging</p> <pre><code># check logs\nstern -t -n external-secrets external-secrets\n\n# check update in the vault-test-app (with http, viddy and htmltidy CLI tools)\nviddy -n 5 -ds 'http https://vault-test.localtest.me/ | tidy -qi -w 0 --tidy-mark no -f /dev/null'\n\n# Eventually restart external-secrets to speed up the update, or just wait a bit\nkubectl -n external-secrets rollout restart deployment/external-secrets\n\n# Eventually restart the test app\nkubectl -n default rollout restart deployment/vault-eso-test-app\n\n# Check the vault-test-app pod output\nalias tidycat='tidy -qi -w 0 --tidy-mark no'\nhttp https://vault-test.localtest.me/ | tidycat -f /dev/null | bat -pP\n\n# Restarting vault will remove all the secrets and the configuration above\nkubectl delete -n vault pod vault-0\n</code></pre> <p>Or, open a shell into the vault container and do it step by step</p> <pre><code>kubectl exec --stdin=true --tty=true -n vault vault-0 -- /bin/sh\n\n# Execute the commands below inside the vault container to enable Kubernetes auth and configure it\nvault auth enable kubernetes\nvault write auth/kubernetes/config \\\n  kubernetes_host=https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT\n\nvault write auth/kubernetes/role/demo \\\n  bound_service_account_names=* \\\n  bound_service_account_namespaces=* \\\n  policies=default \\\n  ttl=1h\n</code></pre>"},{"location":"Vault-ESO/#configure-the-policy-to-allow-access","title":"Configure the policy to allow access","text":"<p>With the CLI</p> <pre><code># Set the vault address\nexport VAULT_ADDR='https://vault.localtest.me'\n\n# Read the default policy, and add the new policy at the end\nvault policy read default &gt; vault-default-policy.hcl\ncat vault-default-policy.hcl vault-policy-addendum.hcl &gt; vault-new-policy.hcl\n\n# Write the new policy\nvault policy write default vault-new-policy.hcl\n</code></pre> <p>Or, open the the vault UI (Token = \"root\")</p> <ul> <li>https://vault.localtest.me/</li> </ul> <p>Navigate to the test policy</p> <ul> <li>https://vault.localtest.me/ui/vault/policy/acl/default</li> </ul> <p>Edit the policy, adding at the bottom:</p> <pre><code># access for test apps\npath \"secret/*\" {\n  capabilities = [ \"read\", \"list\" ]\n}\n</code></pre> <p>Save.</p> <p>Check the test application:</p> <ul> <li>http://test-vault.localtest.me/</li> </ul> <p>If it works you should see the secrets you created.</p>"},{"location":"Vault-ESO/#other-configurations","title":"Other configurations","text":"<pre><code># Create a Kubernetes secret to store the Vault credentials (the Vault token)\n\nVAULT_TOKEN=\"test\"\n\nkubectl create secret generic vault-token --from-literal=token=${VAULT_TOKEN} \\\n  --namespace external-secrets\n</code></pre>"}]}